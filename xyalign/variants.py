# Part of XYalign
# Functions for calling and processing variants
from __future__ import division
import logging
import subprocess
import time
# Matplotlib needs to be called in this way to set the display variable
import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot as plt


# Create logger for variants submodule
variants_logger = logging.getLogger("xyalign.variants")


def platypus_caller(
	platypus_path, log_path, bam, ref, chroms, cpus, output_file,
	regions_file=None):
	"""
	Run platypus to call variants on provided bam file

	Args:
		platypus_path: the path to platypus
		log_path: the path to and name of desired log file for platypus
		bam: input bam (or cram) file
		ref: path to reference sequence
		chroms: a list of chromosomes to call on,
			e.g., ["chrX", "chrY", "chr19"]
		cpus: the number of threads/cores to use
		output_file: the name of the output vcf
		regions_file: restrict calls to specified regions (BED format) [None]

	Outputs:
		Platypus variant calls (VCF file)
	Returns:
		Exit code for platypus process
	"""
	platy_start = time.time()
	if regions_file is None:
		regions = ','.join(map(str, chroms))
	else:
		regions = regions_file
	command_line = [
		platypus_path, "callVariants", "--bamFiles", bam, "-o",
		output_file, "--refFile", ref, "--nCPU", str(cpus), "--regions", regions,
		"--assemble", "1", "--logFileName", log_path]
	variants_logger.info("Calling variants with command line: {}".format(
		" ".join(command_line)))
	return_code = subprocess.call(command_line)
	variants_logger.info(
		"Variant calling complete. Elapsed time: {} seconds".format(
			time.time() - platy_start))
	return return_code


def parse_platypus_VCF(filename, qual_cutoff, chrom):
	"""
	Parse vcf generated by Platypus to grab read balance

	Args:
		filename: is the full path to the input vcf
		qual_cutoff: the minimum (PHRED) quality at which sites should
			be included
		chrom: the name of the chromosome to include

	Returns:
		Tuple containing three corresponding arrays of the same length:
			- position across the chromosome
			- site quality
			- read balance
	"""
	parse_start = time.time()
	variants_logger.info("Parsing {} for read balance.".format(filename))
	infile = open("{}".format(filename), 'r')
	positions = []
	quality = []
	readBalance = []
	for line in infile:
		cols = line.strip('\n').split('\t')
		if cols[0] != chrom:
			continue
		pos = int(cols[1])
		qual = float(cols[5])
		if qual < qual_cutoff:
			continue
		TR = cols[7].split(';')[17].split('=')[1]
		TC = cols[7].split(';')[14].split('=')[1]
		if ',' in TR or ',' in TC:
			continue
		if (float(TR) == 0) or (float(TC) == 0):
			continue
		ReadRatio = float(TR) / float(TC)

		# Add to arrays
		readBalance.append(ReadRatio)
		positions.append(pos)
		quality.append(qual)
	variants_logger.info("Parsing complete. Elapsed time: {} seconds".format(
		time.time() - parse_start))
	return (positions, quality, readBalance)


def plot_variants_per_chrom(
	chrom_list, vcf_file, sampleID, output_prefix, qual_cutoff,
	MarkerSize, MarkerAlpha, bamfile_obj):
	"""
	Parses a vcf file and plots read balance in separate plots
	for each chromosome in the input list

	Args:
		chrom_list: the list of chromosomes to run parse_platypus_VCF and
			plotting functions on
		vcf_file: the file (including path) of platypus vcf to analyze
		sampleID: the sample name (for plot titles)
		output_prefix: the full path to and prefix of desired output plots
		qual_cutoff: the minimum (Phred) quality to consider a site in the vcf
		MarkerSize: the size of markers (matplotlib sizes) to use in the figure
		MarkerAlpha: the transparency (matplotlib values) of markers for
			the figure
		bamfile_obj: a BamFile() object (used to get chromosome lengths only)

	Returns:
		None
	"""
	plot_start = time.time()
	variants_logger.info("Plotting read balance from {} for chroms: {}".format(
		vcf_file, " ".join(chrom_list)))
	for i in chrom_list:
		parse_results = parse_platypus_VCF(vcf_file, qual_cutoff, i)
		plot_read_balance(
			i, parse_results[0], parse_results[2],
			sampleID, output_prefix, MarkerSize, MarkerAlpha, bamfile_obj)
		hist_read_balance(
			i, parse_results[2], sampleID, output_prefix)
	variants_logger.info(
		"Read balance plotting complete. Elapsed time: {} seconds".format(
			time.time() - plot_start))


def plot_read_balance(
	chrom, positions, readBalance, sampleID, output_prefix, MarkerSize,
	MarkerAlpha, bamfile_obj):
	"""
	Plots read balance at each SNP along a chromosome

	Args:
		chrom: the name of the chromosome
		positions: an array of positions along the chromosome (same
			length as readBalance)
		readBalance: an array of read balance corresponding with the
			positions in the positions array
		sampleID: the sample name or id to include in the plot title
		output_prefix: the desired prefix (including full path) of the
			output files
		MarkerSize: the size of markers (matplotlib sizes) to use in
			the figure
		MarkerAlpha: the transparency (matplotlib values) of markers
			for the figure
		bamfile_obj: a BamFile() object (used to get chromosome
			lengths only)

	Outputs:
		Scatter (along genomic positions) plot of read balance values
	Returns:
		None
	"""
	chrom_len = bamfile_obj.get_chrom_length(chrom)
	if "x" in chrom.lower():
		Color = "green"
	elif "y" in chrom.lower():
		Color = "blue"
	else:
		Color = "red"
	fig = plt.figure(figsize=(15, 5))
	axes = fig.add_subplot(111)
	axes.scatter(
		positions, readBalance, c=Color, alpha=MarkerAlpha, s=MarkerSize, lw=0)
	axes.set_xlim(0, chrom_len)
	axes.set_title(sampleID)
	axes.set_xlabel("Chromosomal Coordinate")
	axes.set_ylabel("Read Balance")
	plt.savefig("{}_{}_ReadBalance_GenomicScatter.svg".format(
		output_prefix, chrom))
	plt.savefig("{}_{}_ReadBalance_GenomicScatter.png".format(
		output_prefix, chrom))
	plt.close(fig)
	variants_logger.info("Genomic read balance plot of {} complete.".format(
		chrom))


def hist_read_balance(chrom, readBalance, sampleID, output_prefix):
	"""
	Plots a histogram of read balance

	Args:
		chrom: the name of the chromosome
		readBalance: an array of read balance values
		sampleID: the sample name or id to include in the plot title
		output_prefix: the desired prefix (including full path) of the
			output files

	Outputs:
		Histogram plot of read balance values
	Returns:
		None
	"""
	# TODO (bgrande): Restrict try block to a minimum of code to avoid
	# accidentally catching errors that you didn't mean to catch
	try:
		if "x" in chrom.lower():
			Color = "green"
		elif "y" in chrom.lower():
			Color = "blue"
		else:
			Color = "red"
		fig = plt.figure(figsize=(8, 8))
		axes = fig.add_subplot(111)
		axes.set_title(sampleID)
		axes.set_xlabel("Read Balance")
		axes.set_ylabel("Frequency")
		axes.hist(readBalance, bins=50, color=Color)
		plt.savefig("{}_{}_ReadBalance_Hist.svg".format(output_prefix, chrom))
		plt.savefig("{}_{}_ReadBalance_Hist.png".format(output_prefix, chrom))
		plt.close(fig)
		variants_logger.info(
			"Genomic read balance histogram of {} complete.".format(chrom))
	except IndexError:
		# TODO (bgrande): Missing format() call
		# TODO (bgrande): Why is this an error if the program isn't terminated
		# Maybe it's more appropriate as a warning.
		variants_logger.error(
			"No sites on {} to plot histogram. Skipping.")
